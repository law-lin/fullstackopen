{"version":3,"sources":["services/persons.js","components/Filter.js","components/PersonForm.js","components/Persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","delete","Filter","props","type","onChange","PersonForm","onSubmit","onNameChange","onNumberChange","Persons","persons","map","person","name","toLowerCase","includes","filter","key","number","onClick","window","confirm","personService","then","res","setMessage","catch","err","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setFilter","message","useEffect","data","Notification","className","e","target","value","event","preventDefault","personObject","foundPerson","find","concat","setTimeout","console","log","response","error","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a75f3f5.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst baseUrl = 'http://localhost:3001/api/people';\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  return axios.post(baseUrl, newObject);\r\n};\r\n\r\nconst updateNumber = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject);\r\n};\r\n\r\nconst deletePerson = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`);\r\n};\r\n\r\nexport default {\r\n  getAll: getAll,\r\n  create: create,\r\n  updateNumber: updateNumber,\r\n  deletePerson: deletePerson,\r\n};\r\n","import React from 'react';\r\n\r\nfunction Filter(props) {\r\n  return (\r\n    <>\r\n      <p>filter shown with</p>\r\n      <input type='text' onChange={props.onChange} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\n\r\nfunction PersonForm(props) {\r\n  return (\r\n    <form onSubmit={props.onSubmit}>\r\n      <div>\r\n        name: <input onChange={props.onNameChange} />\r\n      </div>\r\n      <div>\r\n        number: <input onChange={props.onNumberChange} />\r\n      </div>\r\n      <div>\r\n        <button>add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default PersonForm;\r\n","import React from 'react';\r\nimport personService from '../services/persons';\r\n\r\nfunction Persons(props) {\r\n  const deletePerson = (id, name) => {\r\n    if (window.confirm(`Delete ${name}?`)) {\r\n      personService\r\n        .deletePerson(id)\r\n        .then((res) => {\r\n          props.setMessage(`${name} successfully removed!`);\r\n        })\r\n        .catch((err) => {\r\n          props.setMessage(\r\n            `Information of ${name} has already been removed from server`\r\n          );\r\n        });\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {props.persons.map((person) => {\r\n          if (person.name.toLowerCase().includes(props.filter)) {\r\n            return (\r\n              <li key={person.name}>\r\n                {person.name} {person.number}{' '}\r\n                <button onClick={() => deletePerson(person.id, person.name)}>\r\n                  delete\r\n                </button>\r\n              </li>\r\n            );\r\n          }\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Persons;\r\n","import React, { useState, useEffect } from 'react';\nimport personService from './services/persons';\n\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filter, setFilter] = useState('');\n  const [message, setMessage] = useState(null);\n\n  useEffect(() => {\n    personService.getAll().then((res) => {\n      setPersons(res.data);\n    });\n  }, [message]);\n\n  const addName = (event) => {\n    event.preventDefault();\n\n    const personObject = {\n      name: newName,\n      number: newNumber,\n    };\n    let foundPerson = null;\n    if (\n      persons.find((person) => {\n        foundPerson = person;\n        return person.name === newName;\n      })\n    ) {\n      if (\n        window.confirm(\n          `${newName} is already added to phonebook, replace the old number with a new one?`\n        )\n      ) {\n        personService\n          .updateNumber(foundPerson.id, personObject)\n          .then((res) => {\n            setMessage(`${newName}'s number updated successfully!`);\n          })\n          .catch((err) => setMessage(`${newName}'s number failed to update`));\n      }\n    } else {\n      personService\n        .create(personObject)\n        .then((res) => {\n          setPersons(persons.concat({ name: newName, number: newNumber }));\n          setMessage(`Added ${newName}`);\n          setTimeout(() => {\n            setMessage(null);\n          }, 5000);\n        })\n        .catch((err) => {\n          console.log(err.response.data);\n          setMessage(err.response.data.error);\n        });\n    }\n  };\n\n  const Notification = ({ message }) => {\n    if (message === null) {\n      return null;\n    }\n    if (\n      message.toLowerCase().includes('success') ||\n      message.toLowerCase().includes('added')\n    ) {\n      return <div className='success'>{message}</div>;\n    }\n    if (\n      message.toLowerCase().includes('fail') ||\n      message.toLowerCase().includes('has already')\n    )\n      return <div className='error'>{message}</div>;\n\n    return null;\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <Filter onChange={(e) => setFilter(e.target.value)} />\n      <h3>Add a new</h3>\n      <PersonForm\n        onSubmit={addName}\n        onNameChange={(e) => setNewName(e.target.value)}\n        onNumberChange={(e) => setNewNumber(e.target.value)}\n      />\n      <h2>Numbers</h2>\n      <Persons\n        persons={persons}\n        filter={filter}\n        setMessage={(message) => setMessage(message)}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}